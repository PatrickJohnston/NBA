---
title: "NBA Arbs"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "`r Sys.Date()`"
format:
  html:
    df-print: kable
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: visual
---

```{r}
# Get the current date and time
current_time <- Sys.time()

# Format the timestamp to be more aesthetic and human-readable
formatted_time <- format(current_time, "%A, %d %B %Y at %I:%M %p")

# Output the formatted timestamp
cat("Generated on:", formatted_time)
```

```{ojs}
viewof odds1 = Inputs.text({
  label: "Odds 1:",
  placeholder: "Enter odds...",
  value: "2.4" // Default value for demonstration
})

viewof stake1 = Inputs.text({
  label: "Stake 1:",
  placeholder: "Enter stake...",
  value: "100" // Default value for demonstration
})

viewof odds2 = Inputs.text({
  label: "Odds 2:",
  placeholder: "Enter odds...",
  value: "1.8" // Default value for demonstration
})

// Format numbers to two decimal places
formatNumber = (value) => parseFloat(value).toFixed(2)

// Format stakes as dollars
formatCurrency = (value) => `$${parseFloat(value).toFixed(2)}`

// Calculate the required stake for arbitrage
stake2 = {
  const o1 = parseFloat(odds1);
  const s1 = parseFloat(stake1);
  const o2 = parseFloat(odds2);
  if (!isNaN(o1) && !isNaN(s1) && !isNaN(o2)) {
    return (s1 * o1) / o2;
  } else {
    return "Please enter valid numerical values.";
  }
}

// Calculate arbitrage percentage (sum of reciprocals of odds minus 1)
arbitragePercentage = {
  const o1 = parseFloat(odds1);
  const o2 = parseFloat(odds2);
  if (!isNaN(o1) && !isNaN(o2)) {
    const arb = (1 / o1) + (1 / o2);
    return -100 * (1 - arb); // Percentage below 1
  } else {
    return "Please enter valid numerical values.";
  }
}

// Calculate total profit (if arbitrage exists)
totalProfit = {
  const o1 = parseFloat(odds1);
  const s1 = parseFloat(stake1);
  const s2 = stake2;
  if (!isNaN(o1) && !isNaN(s1) && typeof s2 === "number") {
    // Profit if Bet 1 wins
    const profit1 = (s1 * o1) - (s1 + s2);
    return profit1; // Both bets yield the same profit
  } else {
    return "Please enter valid numerical values.";
  }
}

// Output the results in an aesthetic format with left-justified columns
html`
  <div style="
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
    max-width: 600px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  ">
    <div style="display: flex; justify-content: space-between; gap: 20px;">
      <div style="flex: 1; text-align: left;">
        <h3 style="color: #34495e; text-align: left;">Odds</h3>
        <p><strong>Odds 1:</strong> ${formatNumber(odds1)}</p>
        <p><strong>Odds 2:</strong> ${formatNumber(odds2)}</p>
      </div>
      <div style="flex: 1; text-align: left;">
        <h3 style="color: #34495e; text-align: left;">Stakes</h3>
        <p><strong>Stake 1:</strong> ${formatCurrency(stake1)}</p>
        <p><strong>Stake 2:</strong> ${typeof stake2 === "number" ? formatCurrency(stake2) : stake2}</p>
      </div>
    </div>
    <hr style="border: none; border-top: 1px solid #ddd;">
    <h3 style="color: #3498db; text-align: center;">
      Arbitrage Percentage: ${typeof arbitragePercentage === "number" ? formatNumber(-arbitragePercentage) + "%" : arbitragePercentage}
    </h3>
    <h3 style="color: #27ae60; text-align: center;">
      Total Profit: ${typeof totalProfit === "number" ? formatCurrency(totalProfit) : totalProfit}
    </h3>
  </div>
`
```


```{r}
# Libraries
library(tidyverse)

# Read in files
all_arbs <- read_rds("../Data/all_arbs.rds")
all_middles <- read_rds("../Data/all_middles.rds")
tab_miss_by_one <- read_rds("../Data/tab_points_miss_by_one.rds")
```

:::: panel-tabset
## Arbs

::: panel-tabset
## Other Arbs

```{r}
#| column: page

other_arbs <-
  all_arbs |>
  filter(margin > 0) |> 
  filter(!over_agency %in% c("Neds", "Unibet", "Bet365") & !under_agency %in% c("Neds", "Unibet", "Bet365")) |> 
  mutate(margin = round(margin, 2))

other_arbs
```

## Neds Arbs

```{r}
#| column: page

# Separate into Neds and Unibet and the rest
neds_arbs <-
  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Neds") | under_agency %in% c("Neds")) |> 
  filter(!over_agency %in% c("Unibet") & !under_agency %in% c("Unibet")) |> 
  mutate(margin = round(margin, 2))

neds_arbs
```

## Bet365 Arbs

```{r}
#| column: page

# Separate into bet365
bet365_arbs <-
  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Bet365") | under_agency %in% c("Bet365")) |> 
  filter(!over_agency %in% c("Neds", "Unibet") & !under_agency %in% c("Neds", "Unibet")) |> 
  mutate(margin = round(margin, 2))

bet365_arbs
```

## Unibet Arbs

```{r}
#| column: page

unibet_arbs <-
  all_arbs |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("Unibet") | under_agency %in% c("Unibet")) |> 
  filter(!over_agency %in% c("Neds") & !under_agency %in% c("Neds")) |> 
  mutate(margin = round(margin, 2)) |> 
  arrange(match, desc(margin))

unibet_arbs
```

## Tab Miss-by-1 Points Arbs

```{r}
#| column: page

tab_miss_by_1_points_arbs <-
  tab_miss_by_one |>
  filter(margin > 0) |> 
  filter(over_agency %in% c("TAB") | under_agency %in% c("TAB")) |> 
  filter(!over_agency %in% c("Neds", "Unibet") & !under_agency %in% c("Neds", "Unibet")) |> 
  mutate(margin = round(margin, 2))

tab_miss_by_1_points_arbs
```
:::

## Middles

```{r}
#| column: page

all_middles |> 
  mutate(margin = round(margin, 2))
```
::::
