---
title: "Historical ARBs"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "`r Sys.Date()`"
format:
  html:
    df-print: kable
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: visual
---

```{r}
# Libraries and functions-------------------------------------------------------
library(tidyverse)

`%notin%` <- Negate(`%in%`)

# Function to convert time to decimal-------------------------------------------
convert_time_to_decimal_hms <- function(time_obj) {
  # Convert to hms object
  time_obj <- hms(time_obj)
  
  # Extract hours and minutes
  hours <- hour(time_obj)
  minutes <- minute(time_obj)
  
  # Convert to decimal
  decimal_time <- hours + (minutes / 60)
  return(decimal_time)
}

# Read in data------------------------------------------------------------------
# Read in everything in ../Data/odds_archive that is a csv file
all_scraped_odds <-
  list.files("../Data/odds_archive", full.names = TRUE) |>
  keep( ~ str_detect(.x, ".csv$")) |>
  map(read_csv) |>
  # If date column exists, remove it
  map(~ if ("date" %in% colnames(.x)) {
    .x |> select(-date)
  } else {
    .x
  }) |>
  # If timestamp column exists as character, convert to datetime
  map(~ if ("timestamp" %in% colnames(.x)) {
    .x |> mutate(timestamp = as_datetime(timestamp))
  } else {
    .x
  }) |>
  reduce(bind_rows) |>
  filter(timestamp >= "2023-12-01") |>
  # Change start time to adelaide time
  mutate(start_time = start_time + hours(10) + minutes(30)) |> 
  mutate(date = as_date(start_time)) |> 
  mutate(home_away = if_else(opposition_team != home_team, "home", "away")) |> 
  mutate(market_name = str_to_title(market_name)) |>
  distinct(date, player_name, agency, market_name, line, over_price, under_price, .keep_all = TRUE)

# Read in stats-----------------------------------------------------------------

# Player Info
all_rosters <- read_csv("../Data/all_rosters.csv")
all_teams <- read_csv("../Data/all_teams.csv")
all_player_stats_2021_2022 <-
  read_csv("../Data/all_player_stats_2021-2022.csv") |> mutate(SEASON_YEAR = "2021-22")
all_player_stats_2022_2023 <-
  read_csv("../Data/all_player_stats_2022-2023.csv") |> mutate(SEASON_YEAR = "2022-23")
all_player_stats_2023_2024 <-
  read_csv("../Data/all_player_stats_2023-2024.csv") |> mutate(SEASON_YEAR = "2023-24")

# Team Info
all_team_stats_2021_2022 <-
  read_csv("../Data/advanced_box_scores_2021-2022.csv") |> mutate(SEASON_YEAR = "2021-22")
all_team_stats_2022_2023 <-
  read_csv("../Data/advanced_box_scores_2022-2023.csv") |> mutate(SEASON_YEAR = "2022-23")
all_team_stats_2023_2024 <-
  read_csv("../Data/advanced_box_scores_2023-2024.csv") |> mutate(SEASON_YEAR = "2023-24")

# Player Tracker Data
all_player_tracking_2023_2024 <-
  read_csv("../Data/player_track_box_scores_2023-2024.csv") |> mutate(SEASON_YEAR = "2023-24")

# Combine player stats
all_player_stats <-
  all_player_stats_2023_2024 |>
  bind_rows(all_player_stats_2022_2023) |>
  bind_rows(all_player_stats_2021_2022) |>
  left_join(all_rosters[c("PLAYER", "PLAYER_ID")], by = c("personId" = "PLAYER_ID")) |>
  mutate(PRA = points + reboundsTotal + assists) |>
  rename(
    PLAYER_NAME = PLAYER,
    PTS = points,
    REB = reboundsTotal,
    AST = assists,
    STL = steals,
    BLK = blocks,
    FG3M = threePointersMade,
  ) |>
  mutate(MIN = convert_time_to_decimal_hms(minutes)) |>
  mutate(MIN = round(MIN, 2)) |>
  relocate(MIN, .after = minutes)

# Get Game Dates DF
game_dates <-
  all_player_stats |>
  distinct(gameId, GAME_DATE)

# Get Home Teams DF
home_teams <-
  all_player_stats |>
  distinct(gameId, HOME_TEAM)

# Get Away Teams DF
away_teams <-
  all_player_stats |>
  distinct(gameId, AWAY_TEAM)

# Combine team stats
all_team_stats <-
  all_team_stats_2023_2024 |>
  bind_rows(all_team_stats_2022_2023) |>
  bind_rows(all_team_stats_2021_2022) |>
  left_join(game_dates) |>
  left_join(home_teams) |>
  left_join(away_teams) |>
  filter(!is.na(GAME_DATE)) |>
  transmute(
    gameId,
    teamId,
    teamName = paste(teamCity, teamName),
    homeTeam = HOME_TEAM,
    awayTeam = AWAY_TEAM,
    oppositionTeam = if_else(teamName == HOME_TEAM, AWAY_TEAM, HOME_TEAM),
    date = GAME_DATE,
    minutes,
    possessions,
    pacePer40,
    offensiveRating,
    defensiveRating,
    netRating,
    assistPercentage,
    defensiveReboundPercentage,
    offensiveReboundPercentage,
    reboundPercentage,
    trueShootingPercentage,
    effectiveFieldGoalPercentage,
    season = SEASON_YEAR
  ) |>
  mutate(teamName = ifelse(teamName == "LA Clippers", "Los Angeles Clippers", teamName)) |>
  mutate(homeTeam = ifelse(homeTeam == "LA Clippers", "Los Angeles Clippers", homeTeam)) |>
  mutate(awayTeam = ifelse(awayTeam == "LA Clippers", "Los Angeles Clippers", awayTeam)) |>
  mutate(
    oppositionTeam = ifelse(
      oppositionTeam == "LA Clippers",
      "Los Angeles Clippers",
      oppositionTeam
    )
  )

# Create Home / Away variable
all_player_stats <-
  all_player_stats |>
  mutate(team_full = paste(teamCity, teamName)) |>
  mutate(home_away = if_else(team_full == HOME_TEAM, "Home", "Away"))

# Get results data to join to odds----------------------------------------------
player_results <-
  all_player_stats |>
  mutate(HOME_TEAM = ifelse(HOME_TEAM == "LA Clippers", "Los Angeles Clippers", HOME_TEAM)) |>
  mutate(AWAY_TEAM = ifelse(AWAY_TEAM == "LA Clippers", "Los Angeles Clippers", AWAY_TEAM)) |>
  mutate(team_full = ifelse(team_full == "LA Clippers", "Los Angeles Clippers", team_full)) |>
  transmute(
    match = paste(HOME_TEAM, AWAY_TEAM, sep = " v "),
    player_name = PLAYER_NAME,
    team = team_full,
    date = GAME_DATE + days(1),
    points = PTS,
    rebounds = REB,
    assists = AST,
    steals = STL,
    blocks = BLK,
    minutes = MIN,
    PRA,
    FG3M
  )
```

```{r}
# Points------------------------------------------------------------------------
points_unders <-
all_scraped_odds |> 
  filter(market_name == "Player Points") |>
  select(match, start_time, market_name, player_name, player_team, line, under_price, opposition_team, agency) |>
  filter(!is.na(under_price)) |> 
  rename(under_agency = agency) |> 
  arrange(match, start_time, player_name, player_team, opposition_team, line, desc(under_price)) |> 
  filter(under_price > 1)

points_overs <-
all_scraped_odds |>
  filter(market_name == "Player Points") |>
  select(match, start_time, market_name, player_name, player_team, line, over_price, opposition_team, agency) |> 
  rename(over_agency = agency) |> 
  filter(!is.na(over_price)) |>
  arrange(match, start_time, player_name, player_team, opposition_team, line, desc(over_price)) |>
  filter(over_price > 1)

points_arbs <-
points_unders |>
  inner_join(
    points_overs,
    by = c(
      "match",
      "start_time",
      "market_name",
      "player_name",
      "player_team",
      "line",
      "opposition_team"
    ),
    relationship = "many-to-many"
  ) |> 
  relocate(under_price, .after = over_price) |>
  mutate(margin = 1/under_price + 1/over_price) |> 
  arrange(margin) |> 
  mutate(margin = (1 - margin)) |>
  mutate(margin = 100*margin) |> 
  filter(margin > 1) |> 
  distinct(match, player_name, line, over_agency, under_agency, .keep_all = TRUE) |> 
  relocate(over_price, over_agency, under_price, under_agency, .after = opposition_team)

# Rebounds----------------------------------------------------------------------
rebounds_unders <-
all_scraped_odds |> 
  filter(market_name == "Player Rebounds") |>
  select(match, start_time, market_name, player_name, player_team, line, under_price, opposition_team, agency) |>
  filter(!is.na(under_price)) |> 
  rename(under_agency = agency)

rebounds_overs <-
all_scraped_odds |>
  filter(market_name == "Player Rebounds") |>
  select(match, start_time, market_name, player_name, player_team, line, over_price, opposition_team, agency) |> 
  rename(over_agency = agency)

rebounds_arbs <-
rebounds_unders |>
  inner_join(
    rebounds_overs,
    by = c(
      "match",
      "start_time",
      "market_name",
      "player_name",
      "player_team",
      "line",
      "opposition_team"
    ),
    relationship = "many-to-many"
  ) |> 
  relocate(under_price, .after = over_price) |>
  mutate(margin = 1/under_price + 1/over_price) |> 
  arrange(margin) |> 
  mutate(margin = (1 - margin)) |>
  mutate(margin = 100*margin) |> 
  filter(margin > 1) |> 
  distinct(match, player_name, line, over_agency, under_agency, .keep_all = TRUE) |> 
  relocate(over_price, over_agency, under_price, under_agency, .after = opposition_team)


# Assists-----------------------------------------------------------------------
assists_unders <-
  all_scraped_odds |> 
  filter(market_name == "Player Assists") |>
  select(match, start_time, market_name, player_name, player_team, line, under_price, opposition_team, agency) |>
  filter(!is.na(under_price)) |> 
  rename(under_agency = agency)

assists_overs <-
  all_scraped_odds |>
  filter(market_name == "Player Assists") |>
  select(match, start_time, market_name, player_name, player_team, line, over_price, opposition_team, agency) |> 
  rename(over_agency = agency)

assists_arbs <-
  assists_unders |>
  inner_join(
    assists_overs,
    by = c(
      "match",
      "start_time",
      "market_name",
      "player_name",
      "player_team",
      "line",
      "opposition_team"
    ),
    relationship = "many-to-many"
  ) |> 
  relocate(under_price, .after = over_price) |>
  mutate(margin = 1/under_price + 1/over_price) |> 
  arrange(margin) |> 
  mutate(margin = (1 - margin)) |>
  mutate(margin = 100*margin) |> 
  filter(margin > 1) |> 
  distinct(match, player_name, line, over_agency, under_agency, .keep_all = TRUE) |> 
  relocate(over_price, over_agency, under_price, under_agency, .after = opposition_team)


# PRAs--------------------------------------------------------------------------
pra_unders <-
  all_scraped_odds |> 
  filter(market_name == "Player PRAs") |>
  select(match, start_time, market_name, player_name, player_team, line, under_price, opposition_team, agency) |>
  filter(!is.na(under_price)) |> 
  rename(under_agency = agency)

pra_overs <-
  all_scraped_odds |>
  filter(market_name == "Player PRAs") |>
  select(match, start_time, market_name, player_name, player_team, line, over_price, opposition_team, agency) |> 
  rename(over_agency = agency)

pra_arbs <-
  pra_unders |>
  inner_join(
    pra_overs,
    by = c(
      "match",
      "start_time",
      "market_name",
      "player_name",
      "player_team",
      "line",
      "opposition_team"
    ),
    relationship = "many-to-many"
  ) |> 
  relocate(under_price, .after = over_price) |>
  mutate(margin = 1/under_price + 1/over_price) |> 
  arrange(margin) |> 
  mutate(margin = (1 - margin)) |>
  mutate(margin = 100*margin) |> 
  filter(margin > 1) |> 
  distinct(match, player_name, line, over_agency, under_agency, .keep_all = TRUE) |> 
  relocate(over_price, over_agency, under_price, under_agency, .after = opposition_team)


# Threes------------------------------------------------------------------------
threes_unders <-
  all_scraped_odds |> 
  filter(market_name == "Player Threes") |>
  select(match, start_time, market_name, player_name, player_team, line, under_price, opposition_team, agency) |>
  filter(!is.na(under_price)) |> 
  rename(under_agency = agency)

threes_overs <-
  all_scraped_odds |>
  filter(market_name == "Player Threes") |>
  select(match, start_time, market_name, player_name, player_team, line, over_price, opposition_team, agency) |> 
  rename(over_agency = agency)

threes_arbs <-
  threes_unders |>
  inner_join(
    threes_overs,
    by = c(
      "match",
      "start_time",
      "market_name",
      "player_name",
      "player_team",
      "line",
      "opposition_team"
    ),
    relationship = "many-to-many"
  ) |> 
  relocate(under_price, .after = over_price) |>
  mutate(margin = 1/under_price + 1/over_price) |> 
  arrange(margin) |> 
  mutate(margin = (1 - margin)) |>
  mutate(margin = 100*margin) |> 
  filter(margin > 1) |> 
  distinct(match, player_name, line, over_agency, under_agency, .keep_all = TRUE) |> 
  relocate(over_price, over_agency, under_price, under_agency, .after = opposition_team)


# Steals------------------------------------------------------------------------
steals_unders <-
  all_scraped_odds |> 
  filter(market_name == "Player Steals") |>
  select(match, start_time, market_name, player_name, player_team, line, under_price, opposition_team, agency) |>
  filter(!is.na(under_price)) |> 
  rename(under_agency = agency)

steals_overs <-
  all_scraped_odds |>
  filter(market_name == "Player Steals") |>
  select(match, start_time, market_name, player_name, player_team, line, over_price, opposition_team, agency) |> 
  rename(over_agency = agency)

steals_arbs <-
  steals_unders |>
  inner_join(
    steals_overs,
    by = c(
      "match",
      "start_time",
      "market_name",
      "player_name",
      "player_team",
      "line",
      "opposition_team"
    ),
    relationship = "many-to-many"
  ) |> 
  relocate(under_price, .after = over_price) |>
  mutate(margin = 1/under_price + 1/over_price) |> 
  arrange(margin) |> 
  mutate(margin = (1 - margin)) |>
  mutate(margin = 100*margin) |> 
  filter(margin > 1) |> 
  distinct(match, player_name, line, over_agency, under_agency, .keep_all = TRUE) |> 
  relocate(over_price, over_agency, under_price, under_agency, .after = opposition_team)


# Blocks------------------------------------------------------------------------
blocks_unders <-
  all_scraped_odds |> 
  filter(market_name == "Player Blocks") |>
  select(match, start_time, market_name, player_name, player_team, line, under_price, opposition_team, agency) |>
  filter(!is.na(under_price)) |> 
  rename(under_agency = agency)

blocks_overs <-
  all_scraped_odds |>
  filter(market_name == "Player Blocks") |>
  select(match, start_time, market_name, player_name, player_team, line, over_price, opposition_team, agency) |> 
  rename(over_agency = agency)

blocks_arbs <-
  blocks_unders |>
  inner_join(
    blocks_overs,
    by = c(
      "match",
      "start_time",
      "market_name",
      "player_name",
      "player_team",
      "line",
      "opposition_team"
    ),
    relationship = "many-to-many"
  ) |> 
  relocate(under_price, .after = over_price) |>
  mutate(margin = 1/under_price + 1/over_price) |> 
  arrange(margin) |> 
  mutate(margin = (1 - margin)) |>
  mutate(margin = 100*margin) |> 
  filter(margin > 1) |> 
  distinct(match, player_name, line, over_agency, under_agency, .keep_all = TRUE) |> 
  relocate(over_price, over_agency, under_price, under_agency, .after = opposition_team)

#===============================================================================
# Get all ARBs together
#===============================================================================

all_arbs <-
bind_rows(points_arbs,
          assists_arbs,
          rebounds_arbs,
          blocks_arbs,
          steals_arbs,
          threes_arbs,
          pra_arbs) |>
  arrange(desc(margin))

all_arbs |>
  group_by(market_name) |> 
  summarise(n_arbs = n(), profit = sum(margin)) |> 
  arrange(desc(profit)) |> 
  bind_rows(tibble(market_name = "All", n_arbs = nrow(all_arbs), profit = sum(all_arbs$margin)))

```
