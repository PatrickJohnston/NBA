---
title: "Performance Review - Night Before"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "`r Sys.Date()`"
format:
  html:
    df-print: kable
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: visual
---

```{r}
# Libraries and functions-------------------------------------------------------
library(tidyverse)

`%notin%` <- Negate(`%in%`)

# Function to convert time to decimal-------------------------------------------
convert_time_to_decimal_hms <- function(time_obj) {
  # Convert to hms object
  time_obj <- hms(time_obj)
  
  # Extract hours and minutes
  hours <- hour(time_obj)
  minutes <- minute(time_obj)
  
  # Convert to decimal
  decimal_time <- hours + (minutes / 60)
  return(decimal_time)
}

# Read in data------------------------------------------------------------------
# Read in everything in ../Data/odds_archive that is a csv file
all_scraped_odds <-
  list.files("../Data/odds_archive/night_before", full.names = TRUE) |>
  keep( ~ str_detect(.x, ".csv$")) |>
  map(read_csv) |>
  map(~ mutate(.x, date = as.Date(date))) |> 
  reduce(bind_rows) |>
  filter(timestamp >= "2023-12-01") |>
  # Change start time to adelaide time
  mutate(start_time = start_time + hours(10) + minutes(30)) |> 
  mutate(date = as_date(start_time)) |> 
  mutate(home_away = if_else(opposition_team != home_team, "home", "away")) |> 
  mutate(market_name = str_to_title(market_name)) |>
  distinct(date, player_name, agency, market_name, line, over_price, under_price, .keep_all = TRUE)

# Read in stats-----------------------------------------------------------------

# Player Info
all_rosters <- read_csv("../Data/all_rosters.csv")
all_teams <- read_csv("../Data/all_teams.csv")
all_player_stats_2021_2022 <-
  read_csv("../Data/all_player_stats_2021-2022.csv") |> mutate(SEASON_YEAR = "2021-22")
all_player_stats_2022_2023 <-
  read_csv("../Data/all_player_stats_2022-2023.csv") |> mutate(SEASON_YEAR = "2022-23")
all_player_stats_2023_2024 <-
  read_csv("../Data/all_player_stats_2023-2024.csv") |> mutate(SEASON_YEAR = "2023-24")

# Team Info
all_team_stats_2021_2022 <-
  read_csv("../Data/advanced_box_scores_2021-2022.csv") |> mutate(SEASON_YEAR = "2021-22")
all_team_stats_2022_2023 <-
  read_csv("../Data/advanced_box_scores_2022-2023.csv") |> mutate(SEASON_YEAR = "2022-23")
all_team_stats_2023_2024 <-
  read_csv("../Data/advanced_box_scores_2023-2024.csv") |> mutate(SEASON_YEAR = "2023-24")

# Player Tracker Data
all_player_tracking_2023_2024 <-
  read_csv("../Data/player_track_box_scores_2023-2024.csv") |> mutate(SEASON_YEAR = "2023-24")

# Combine player stats
all_player_stats <-
  all_player_stats_2023_2024 |>
  bind_rows(all_player_stats_2022_2023) |>
  bind_rows(all_player_stats_2021_2022) |>
  left_join(all_rosters[c("PLAYER", "PLAYER_ID")], by = c("personId" = "PLAYER_ID")) |>
  mutate(PRA = points + reboundsTotal + assists) |>
  rename(
    PLAYER_NAME = PLAYER,
    PTS = points,
    REB = reboundsTotal,
    AST = assists,
    STL = steals,
    BLK = blocks,
    FG3M = threePointersMade,
  ) |>
  mutate(MIN = convert_time_to_decimal_hms(minutes)) |>
  mutate(MIN = round(MIN, 2)) |>
  relocate(MIN, .after = minutes)

# Get Game Dates DF
game_dates <-
  all_player_stats |>
  distinct(gameId, GAME_DATE)

# Get Home Teams DF
home_teams <-
  all_player_stats |>
  distinct(gameId, HOME_TEAM)

# Get Away Teams DF
away_teams <-
  all_player_stats |>
  distinct(gameId, AWAY_TEAM)

# Combine team stats
all_team_stats <-
  all_team_stats_2023_2024 |>
  bind_rows(all_team_stats_2022_2023) |>
  bind_rows(all_team_stats_2021_2022) |>
  left_join(game_dates) |>
  left_join(home_teams) |>
  left_join(away_teams) |>
  filter(!is.na(GAME_DATE)) |>
  transmute(
    gameId,
    teamId,
    teamName = paste(teamCity, teamName),
    homeTeam = HOME_TEAM,
    awayTeam = AWAY_TEAM,
    oppositionTeam = if_else(teamName == HOME_TEAM, AWAY_TEAM, HOME_TEAM),
    date = GAME_DATE,
    minutes,
    possessions,
    pacePer40,
    offensiveRating,
    defensiveRating,
    netRating,
    assistPercentage,
    defensiveReboundPercentage,
    offensiveReboundPercentage,
    reboundPercentage,
    trueShootingPercentage,
    effectiveFieldGoalPercentage,
    season = SEASON_YEAR
  ) |>
  mutate(teamName = ifelse(teamName == "LA Clippers", "Los Angeles Clippers", teamName)) |>
  mutate(homeTeam = ifelse(homeTeam == "LA Clippers", "Los Angeles Clippers", homeTeam)) |>
  mutate(awayTeam = ifelse(awayTeam == "LA Clippers", "Los Angeles Clippers", awayTeam)) |>
  mutate(
    oppositionTeam = ifelse(
      oppositionTeam == "LA Clippers",
      "Los Angeles Clippers",
      oppositionTeam
    )
  )

# Create Home / Away variable
all_player_stats <-
  all_player_stats |>
  mutate(team_full = paste(teamCity, teamName)) |>
  mutate(home_away = if_else(team_full == HOME_TEAM, "Home", "Away"))

# Get results data to join to odds----------------------------------------------
player_results <-
  all_player_stats |>
  mutate(HOME_TEAM = ifelse(HOME_TEAM == "LA Clippers", "Los Angeles Clippers", HOME_TEAM)) |>
  mutate(AWAY_TEAM = ifelse(AWAY_TEAM == "LA Clippers", "Los Angeles Clippers", AWAY_TEAM)) |>
  mutate(team_full = ifelse(team_full == "LA Clippers", "Los Angeles Clippers", team_full)) |>
  transmute(
    match = paste(HOME_TEAM, AWAY_TEAM, sep = " v "),
    player_name = PLAYER_NAME,
    team = team_full,
    date = GAME_DATE + days(1),
    points = PTS,
    rebounds = REB,
    assists = AST,
    steals = STL,
    blocks = BLK,
    minutes = MIN,
    PRA,
    FG3M
  )

# Get offensive rating and pace vs opposition
opp_stats <- read_rds("../Data/stats_vs_opp_med.rds")

# Centre rolling averages
opp_stats <-
opp_stats |> 
  mutate_at(vars(contains("rolling")), ~ .x - mean(.x, na.rm = TRUE)) |> 
  select(date, oppositionTeam, contains("rolling"))

##%######################################################%##
#                                                          #
####             Get Player Points Markets              ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_points_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Points")

# Propogate Start Date forward if missing
player_points_markets <-
  player_points_markets |>
  group_by(match) |>
  fill(date, .direction = "downup") |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_points_markets_overs_best <-
  player_points_markets

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_points_overs <-
  player_points_markets_overs_best |>

  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(points >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------

#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_points_markets_unders_best <-
  player_points_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_points_unders <-
  player_points_markets_unders_best |>
  
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(points <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------

##%######################################################%##
#                                                          #
####           Get Player Rebounds Markets              ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_rebounds_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Rebounds")

# Propogate Start Date forward if missing
player_rebounds_markets <-
  player_rebounds_markets |>
  group_by(match) |>
  fill(date, .direction = "downup") |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_rebounds_markets_overs_best <-
  player_rebounds_markets 

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_rebounds_overs <-
  player_rebounds_markets_overs_best |>
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(rebounds >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------


#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_rebounds_markets_unders_best <-
  player_rebounds_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_rebounds_unders <-
  player_rebounds_markets_unders_best |>
  
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(rebounds <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------

##%######################################################%##
#                                                          #
####            Get Player Assists Markets              ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_assists_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Assists")

# Propogate Start Date forward if missing
player_assists_markets <-
  player_assists_markets |>
  group_by(match) |>
  fill(date, .direction = "downup") |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_assists_markets_overs_best <-
  player_assists_markets

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_assists_overs <-
  player_assists_markets_overs_best |>

  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(assists >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------


#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_assists_markets_unders_best <-
  player_assists_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_assists_unders <-
  player_assists_markets_unders_best |>
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(assists <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------


##%######################################################%##
#                                                          #
####              Get Player PRAs Markets               ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_pras_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Pras")

# Propogate Start Date forward if missing
player_pras_markets <-
  player_pras_markets |>
  group_by(match) |>
  fill(date, .direction = "downup") |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_pras_markets_overs_best <-
  player_pras_markets

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_pras_overs <-
  player_pras_markets_overs_best |>

  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(PRA >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------


#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_pras_markets_unders_best <-
  player_pras_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_pras_unders <-
  player_pras_markets_unders_best |>
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(PRA <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------

##%######################################################%##
#                                                          #
####              Get Player Threes Markets               ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_threes_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Threes")

# Propogate Start Date forward if missing
player_threes_markets <-
  player_threes_markets |>
  group_by(match) |>
  fill(date, .direction = "downup") |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_threes_markets_overs_best <-
  player_threes_markets

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_threes_overs <-
  player_threes_markets_overs_best |>
  
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(FG3M >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------


#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_threes_markets_unders_best <-
  player_threes_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_threes_unders <-
  player_threes_markets_unders_best |>
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(FG3M <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------

##%######################################################%##
#                                                          #
####             Get Player Steals Markets              ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_steals_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Steals")

# Propogate Start Date forward if missing
player_steals_markets <-
  player_steals_markets |>
  mutate(date = as.Date(start_time)) |>
  group_by(match) |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_steals_markets_overs_best <-
  player_steals_markets

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_steals_overs <-
  player_steals_markets_overs_best |>
  
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(steals >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------


#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_steals_markets_unders_best <-
  player_steals_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_steals_unders <-
  player_steals_markets_unders_best |>
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(steals <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------

##%######################################################%##
#                                                          #
####             Get Player Blocks Markets              ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_blocks_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Blocks")

# Propogate Start Date forward if missing
player_blocks_markets <-
  player_blocks_markets |>
  mutate(date = as.Date(start_time)) |>
  group_by(match) |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_blocks_markets_overs_best <-
  player_blocks_markets

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_blocks_overs <-
  player_blocks_markets_overs_best |>
  
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(blocks >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------


#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_blocks_markets_unders_best <-
  player_blocks_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_blocks_unders <-
  player_blocks_markets_unders_best |>
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(blocks <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------

##%######################################################%##
#                                                          #
####                Analyse scraped odds                ####
#                                                          #
##%######################################################%##

# All overs
all_overs <-
  bind_rows(
    strategy_1_points_overs,
    strategy_1_assists_overs,
    strategy_1_rebounds_overs,
    strategy_1_pras_overs,
    strategy_1_threes_overs,
    strategy_1_steals_overs,
    strategy_1_blocks_overs
  ) |>
  arrange(date, player_name, market_name, line, desc(over_price)) |>
  group_by(date, player_name, market_name, line, agency) |>
  slice_head(n = 1) |>
  ungroup() |> 
  left_join(opp_stats, by = c("date", "opposition_team" = "oppositionTeam")) |> 
  mutate(
    fixture_difficulty = case_when(
      market_name == "Player Points" ~ rolling_15_game_points,
      market_name == "Player Assists" ~ rolling_15_game_assists,
      market_name == "Player Rebounds" ~ rolling_15_game_rebounds,
      market_name == "Player Blocks" ~ rolling_15_game_blocks,
      market_name == "Player Steals" ~ rolling_15_game_steals,
      market_name == "Player Threes" ~ rolling_15_game_threes,
      market_name == "Player PRAs" ~ rolling_15_game_PRAs
    )
  )

# All unders
all_unders <-
  bind_rows(
    strategy_1_points_unders,
    strategy_1_assists_unders,
    strategy_1_rebounds_unders,
    strategy_1_pras_unders,
    strategy_1_threes_unders,
    strategy_1_steals_unders,
    strategy_1_blocks_unders
  ) |>
  arrange(date, player_name, market_name, line, desc(under_price)) |>
  group_by(date, player_name, market_name, line, agency) |>
  slice_head(n = 1) |>
  ungroup() |>
  left_join(opp_stats, by = c("date", "opposition_team" = "oppositionTeam")) |> 
    mutate(
    fixture_difficulty = case_when(
      market_name == "Player Points" ~ rolling_15_game_points,
      market_name == "Player Assists" ~ rolling_15_game_assists,
      market_name == "Player Rebounds" ~ rolling_15_game_rebounds,
      market_name == "Player Blocks" ~ rolling_15_game_blocks,
      market_name == "Player Steals" ~ rolling_15_game_steals,
      market_name == "Player Threes" ~ rolling_15_game_threes,
      market_name == "Player PRAs" ~ rolling_15_game_PRAs
    )
  )

#===============================================================================
# Diff method
#===============================================================================

overs_diff_method <-
all_overs |> 
  arrange(date, player_name, market_name, line, desc(over_price)) |> 
  group_by(date, player_name, market_name, line) |>
  slice_head(n = 2) |>
  mutate(variation = max(implied_prob_over) - min(implied_prob_over)) |>
  slice_head(n = 1) |> 
  ungroup() |>
  arrange(desc(variation), player_name, line) |> 
  filter(diff_under_last_10 >= 0.05 & diff_under_2023_24 >= 0.05) |>
  filter(over_price >= 1.3)

unders_diff_method <-
  all_unders |> 
  arrange(date, player_name, market_name, line, desc(under_price)) |> 
  group_by(date, player_name, market_name, line) |>
  slice_head(n = 2) |>
  mutate(variation = max(implied_prob_under) - min(implied_prob_under)) |>
  slice_head(n = 1) |> 
  ungroup() |>
  arrange(desc(variation), player_name, line) |> 
  filter(diff_under_last_10 >= 0.05 & diff_under_2023_24 >= 0.05) |>
  filter(under_price >= 1.3)

#===============================================================================
# Outlier Method
#===============================================================================

markets_with_two <- c("Player Threes", "Player Steals", "Player Blocks")

overs_outlier_method <-
all_overs |> 
  arrange(date, player_name, market_name, line, desc(over_price)) |> 
  group_by(date, player_name, market_name, line) |>
  filter(n() > 2) |> 
  slice_head(n = 2) |>
  mutate(variation = max(implied_prob_over) - min(implied_prob_over)) |>
  slice_head(n = 1) |> 
  ungroup() |>
  arrange(desc(variation), player_name, line) |> 
  filter(variation >= 0.025) |>
  filter(diff_over_last_10 >= 0.1 & diff_over_2023_24 >= 0.05) |>
  filter(over_price >= 1.3) |> 
  filter(!is.na(under_price)) |> 
  # filter(fixture_difficulty <= 0) |>
  relocate(fixture_difficulty, .after = date)

unders_outlier_method_1 <-
  all_unders |>
  filter(market_name %in% markets_with_two) |>
  arrange(date, player_name, market_name, line, desc(under_price)) |> 
  group_by(date, player_name, market_name, line) |>
  filter(n() > 1) |> 
  slice_head(n = 2) |>
  mutate(variation = max(implied_prob_under) - min(implied_prob_under)) |>
  slice_head(n = 1) |> 
  ungroup() |>
  arrange(desc(variation), player_name, line) |> 
  filter(variation >= 0.025) |> 
  filter(diff_under_last_10 >= 0.1 & diff_under_2023_24 >= 0.05) |>
  filter(under_price >= 1.3) |> 
  # filter(fixture_difficulty <= 0) |> 
  relocate(fixture_difficulty, .after = date)

unders_outlier_method_2 <-
  all_unders |> 
  filter(!market_name %in% markets_with_two) |>
  arrange(date, player_name, market_name, line, desc(under_price)) |> 
  group_by(date, player_name, market_name, line) |>
  filter(n() > 2) |> 
  slice_head(n = 2) |>
  mutate(variation = max(implied_prob_under) - min(implied_prob_under)) |>
  slice_head(n = 1) |> 
  ungroup() |>
  arrange(desc(variation), player_name, line) |> 
  filter(variation >= 0.025) |> 
  filter(diff_under_last_10 >= 0.05 & diff_under_2023_24 >= 0.05) |>
  filter(under_price >= 1.3) |> 
  # filter(fixture_difficulty <= 0) |> 
  relocate(fixture_difficulty, .after = date)

unders_outlier_method <-
  bind_rows(unders_outlier_method_1, unders_outlier_method_2) |>
  arrange(desc(date), player_name, line)
```

```{r}
# Unders Same Player Multi Method-----------------------------------------------

# Rebounds
rebound_unders <- 
  all_unders |>
  filter(market_name == "Player Rebounds") |>
  select(
    date,
    match,
    agency,
    home_away,
    player_team,
    player_name,
    rebound_line = line,
    rebound_under_price = under_price,
    rebound_diff_under_2023_24 = diff_under_2023_24,
    rebound_diff_under_last_10 = diff_under_last_10,
    rebound_bet_won = bet_won
  )

# Points
point_unders <- 
  all_unders |>
  filter(market_name == "Player Points") |>
  select(
    date,
    match,
    agency,
    home_away,
    player_team,
    player_name,
    point_line = line,
    point_under_price = under_price,
    point_diff_under_2023_24 = diff_under_2023_24,
    point_diff_under_last_10 = diff_under_last_10,
    point_bet_won = bet_won
  )

# Assists
assist_unders <- 
  all_unders |>
  filter(market_name == "Player Assists") |>
  filter(!is.na(under_price)) |> 
  select(
    date,
    match,
    agency,
    home_away,
    player_team,
    player_name,
    assist_line = line,
    assist_under_price = under_price,
    assist_diff_under_2023_24 = diff_under_2023_24,
    assist_diff_under_last_10 = diff_under_last_10,
    assist_bet_won = bet_won
  )

# Join Together
unders_same_player_multi_method_1 <-
  rebound_unders |>
  left_join(point_unders,
            by = c("date", "home_away", "match", "agency", "player_team", "player_name")) |>
  filter(agency != "Unibet") |> 
  filter(
    rebound_diff_under_last_10 > 0.05 &
      point_diff_under_last_10 > 0.05 &
      rebound_diff_under_2023_24 > 0.05 &
      point_diff_under_2023_24 > 0.05
  ) |> 
  mutate(overall_diff_under_last_10 = (rebound_diff_under_last_10 * point_diff_under_last_10),
         overall_diff_under_2023_24 = (rebound_diff_under_2023_24 * point_diff_under_2023_24)) |> 
  mutate(uncorrelated_price = (rebound_under_price * point_under_price)) |> 
  arrange(date, match, player_name, player_team, desc(uncorrelated_price)) |> 
  group_by(date, match, player_name, player_team, point_line, rebound_line) |>
  slice_head(n = 1) |> 
  ungroup() |> 
  filter(uncorrelated_price <= 4 & uncorrelated_price >= 2.85) |> 
  mutate(correlated_price = 1/uncorrelated_price + 0.03) |>
  mutate(correlated_price = 1/correlated_price) |>
  mutate(bet_won = if_else(point_bet_won & rebound_bet_won, TRUE, FALSE)) |> 
  mutate(profit = if_else(bet_won, ((uncorrelated_price * 100) - 100), -100)) |> 
  mutate(profit_correlated = if_else(bet_won, ((correlated_price * 100) - 100), -100))

unders_same_player_multi_method_2 <-
    rebound_unders |>
  left_join(assist_unders,
            by = c("date", "home_away", "match", "agency", "player_team", "player_name")) |>
  filter(agency != "Unibet") |> 
  filter(
    rebound_diff_under_last_10 > 0.05 &
      assist_diff_under_last_10 > 0.05 &
      rebound_diff_under_2023_24 > 0.05 &
      assist_diff_under_2023_24 > 0.05
  ) |> 
  mutate(overall_diff_under_last_10 = (rebound_diff_under_last_10 * assist_diff_under_last_10),
         overall_diff_under_2023_24 = (rebound_diff_under_2023_24 * assist_diff_under_2023_24)) |> 
  mutate(uncorrelated_price = (rebound_under_price * assist_under_price)) |> 
  arrange(date, match, player_name, player_team, desc(uncorrelated_price)) |> 
  group_by(date, match, player_name, player_team, assist_line, rebound_line) |>
  slice_head(n = 1) |> 
  ungroup() |> 
  filter(uncorrelated_price <= 4 & uncorrelated_price >= 2.85) |> 
  mutate(correlated_price = 1/uncorrelated_price + 0.03) |>
  mutate(correlated_price = 1/correlated_price) |>
  mutate(bet_won = if_else(rebound_bet_won & assist_bet_won, TRUE, FALSE)) |> 
  mutate(profit = if_else(bet_won, ((uncorrelated_price * 100) - 100), -100)) |> 
  mutate(profit_correlated = if_else(bet_won, ((correlated_price * 100) - 100), -100))

unders_same_player_multi_method_3 <-
    point_unders |>
  left_join(assist_unders,
            by = c("date", "home_away", "match", "agency", "player_team", "player_name")) |>
  filter(agency != "Unibet") |> 
  filter(
    point_diff_under_last_10 > 0.05 &
      assist_diff_under_last_10 > 0.05 &
      point_diff_under_2023_24 > 0.05 &
      assist_diff_under_2023_24 > 0.05
  ) |> 
  mutate(overall_diff_under_last_10 = (point_diff_under_last_10 * assist_diff_under_last_10),
         overall_diff_under_2023_24 = (point_diff_under_2023_24 * assist_diff_under_2023_24)) |> 
  mutate(uncorrelated_price = (point_under_price * assist_under_price)) |> 
  arrange(date, match, player_name, player_team, desc(uncorrelated_price)) |> 
  group_by(date, match, player_name, player_team, assist_line, point_line) |>
  slice_head(n = 1) |> 
  ungroup() |> 
  filter(uncorrelated_price <= 4 & uncorrelated_price >= 2.85) |> 
  mutate(correlated_price = 1/uncorrelated_price + 0.03) |>
  mutate(correlated_price = 1/correlated_price) |>
  mutate(bet_won = if_else(point_bet_won & assist_bet_won, TRUE, FALSE)) |> 
  mutate(profit = if_else(bet_won, ((uncorrelated_price * 100) - 100), -100)) |> 
  mutate(profit_correlated = if_else(bet_won, ((correlated_price * 100) - 100), -100))

unders_same_player_multi_method <-
  bind_rows(unders_same_player_multi_method_1,
            unders_same_player_multi_method_2,
            unders_same_player_multi_method_3)
```

# Outlier Method

## Overs

::: panel-tabset
### Overall

```{r}
overs_outlier_method |> 
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake))
```

### By Market

```{r}
overs_outlier_method |> 
    group_by(market_name) |>
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake)) |> 
  arrange(desc(ROI))
```

### By Date

```{r}
overs_outlier_method |> 
    group_by(date) |>
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake)) |> 
  arrange(desc(date))
```
:::

## Unders

::: panel-tabset
### Overall

```{r}
unders_outlier_method |> 
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake))
```

### By Market

```{r}
unders_outlier_method |> 
    group_by(market_name) |>
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake)) |> 
  arrange(desc(ROI))
```

### By Date

```{r}
unders_outlier_method |> 
    group_by(date) |>
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake)) |> 
  arrange(desc(date))
```
:::

# Same Player Multi Method

## Unders

::: panel-tabset
### Overall

```{r}
unders_same_player_multi_method |> 
  summarise(bets_placed = n(),
            total_stake = 100*n(),
            profit = sum(profit_correlated),
            ROI = 100*(profit / total_stake))
```

### By Home or Away Status

```{r}
unders_same_player_multi_method |> 
    group_by(home_away) |>
  summarise(bets_placed = n(),
            total_stake = 100*n(),
            profit = sum(profit_correlated),
            ROI = 100*(profit / total_stake)) |> 
  arrange(desc(ROI))
```

### By Date

```{r}
unders_same_player_multi_method |> 
    group_by(date) |>
  summarise(bets_placed = n(),
            total_stake = 100*n(),
            profit = sum(profit_correlated),
            ROI = 100*(profit / total_stake)) |> 
  arrange(desc(date))
```
:::

# Diff Method

## Overs

### Overall

```{r}

overs_diff_method |>
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake))

```

### By Market

```{r}
overs_diff_method |>
  group_by(market_name) |>
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake)) |> 
  arrange(desc(ROI))

```

### By Fixture Difficulty

```{r}
overs_diff_method |>
  filter(!is.na(fixture_difficulty)) |> 
  group_by(fixture_difficulty < 0) |> 
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake))
```

### By Home / Away Status

```{r}
overs_diff_method |>
  group_by(home_away) |> 
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake))
```

## Unders

### Overall

```{r}
unders_diff_method |>
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake))
```

### By Market

```{r}
unders_diff_method |>
  group_by(market_name) |>
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake)) |> 
  arrange(desc(ROI))

```

### By Fixture Difficulty

```{r}
unders_diff_method |>
  filter(!is.na(fixture_difficulty)) |> 
  group_by(fixture_difficulty < 0) |> 
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake))
```

### By Home / Away Status

```{r}
unders_diff_method |>
  group_by(home_away) |> 
  summarise(bets_placed = n(),
            total_stake = sum(stake),
            profit = sum(profit),
            ROI = 100*(profit / total_stake))

```

### Best Combo

```{r}
unders_diff_method |>
  filter(fixture_difficulty < 0) |>
  filter(home_away == "away") |>
  filter(market_name %notin% c("Player Pras",
                               "Player Assists",
                               "Player Blocks")) |>
  filter(variation >= 0.01) |>
  summarise(
    bets_placed = n(),
    total_stake = sum(stake),
    profit = sum(profit),
    ROI = 100 * (profit / total_stake)
  )

```
