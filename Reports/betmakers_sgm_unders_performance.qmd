---
title: "Betmakers SGM Review"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "`r Sys.Date()`"
format:
  html:
    df-print: kable
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: visual
---

```{r}
# Libraries and functions-------------------------------------------------------
library(tidyverse)
library(glue)
`%notin%` <- Negate(`%in%`)

# Function to convert time to decimal-------------------------------------------
convert_time_to_decimal_hms <- function(time_obj) {
  # Convert to hms object
  time_obj <- hms(time_obj)
  
  # Extract hours and minutes
  hours <- hour(time_obj)
  minutes <- minute(time_obj)
  
  # Convert to decimal
  decimal_time <- hours + (minutes / 60)
  return(decimal_time)
}

# Read in data------------------------------------------------------------------
# Read in everything in ../Data/odds_archive that is a csv file
all_scraped_odds <-
  list.files("../Data/odds_archive", full.names = TRUE) |>
  keep( ~ str_detect(.x, ".csv$")) |>
  map(read_csv) |>
  # If date column exists, remove it
  map(~ if ("date" %in% colnames(.x)) {
    .x |> select(-date)
  } else {
    .x
  }) |>
  # If timestamp column exists as character, convert to datetime
  map(~ if ("timestamp" %in% colnames(.x)) {
    .x |> mutate(timestamp = as_datetime(timestamp))
  } else {
    .x
  }) |>
  reduce(bind_rows) |>
  filter(timestamp >= "2023-12-01") |>
  # Change start time to adelaide time
  mutate(start_time = start_time + hours(10) + minutes(30)) |> 
  mutate(date = as_date(start_time)) |> 
  mutate(home_away = if_else(opposition_team != home_team, "home", "away")) |> 
  mutate(market_name = str_to_title(market_name)) |>
  distinct(date, player_name, agency, market_name, line, over_price, under_price, .keep_all = TRUE)

# Read in stats-----------------------------------------------------------------

# Player Info
all_rosters <- read_csv("../Data/all_rosters.csv")
all_teams <- read_csv("../Data/all_teams.csv")
all_player_stats_2021_2022 <-
  read_csv("../Data/all_player_stats_2021-2022.csv") |> mutate(SEASON_YEAR = "2021-22")
all_player_stats_2022_2023 <-
  read_csv("../Data/all_player_stats_2022-2023.csv") |> mutate(SEASON_YEAR = "2022-23")
all_player_stats_2023_2024 <-
  read_csv("../Data/all_player_stats_2023-2024.csv") |> mutate(SEASON_YEAR = "2023-24")

# Team Info
all_team_stats_2021_2022 <-
  read_csv("../Data/advanced_box_scores_2021-2022.csv") |> mutate(SEASON_YEAR = "2021-22")
all_team_stats_2022_2023 <-
  read_csv("../Data/advanced_box_scores_2022-2023.csv") |> mutate(SEASON_YEAR = "2022-23")
all_team_stats_2023_2024 <-
  read_csv("../Data/advanced_box_scores_2023-2024.csv") |> mutate(SEASON_YEAR = "2023-24")

# Player Tracker Data
all_player_tracking_2023_2024 <-
  read_csv("../Data/player_track_box_scores_2023-2024.csv") |> mutate(SEASON_YEAR = "2023-24")

# Combine player stats
all_player_stats <-
  all_player_stats_2023_2024 |>
  bind_rows(all_player_stats_2022_2023) |>
  bind_rows(all_player_stats_2021_2022) |>
  left_join(all_rosters[c("PLAYER", "PLAYER_ID")], by = c("personId" = "PLAYER_ID")) |>
  mutate(PRA = points + reboundsTotal + assists) |>
  rename(
    PLAYER_NAME = PLAYER,
    PTS = points,
    REB = reboundsTotal,
    AST = assists,
    STL = steals,
    BLK = blocks,
    FG3M = threePointersMade,
  ) |>
  mutate(MIN = convert_time_to_decimal_hms(minutes)) |>
  mutate(MIN = round(MIN, 2)) |>
  relocate(MIN, .after = minutes)

# Get Game Dates DF
game_dates <-
  all_player_stats |>
  distinct(gameId, GAME_DATE)

# Get Home Teams DF
home_teams <-
  all_player_stats |>
  distinct(gameId, HOME_TEAM)

# Get Away Teams DF
away_teams <-
  all_player_stats |>
  distinct(gameId, AWAY_TEAM)

# Combine team stats
all_team_stats <-
  all_team_stats_2023_2024 |>
  bind_rows(all_team_stats_2022_2023) |>
  bind_rows(all_team_stats_2021_2022) |>
  left_join(game_dates) |>
  left_join(home_teams) |>
  left_join(away_teams) |>
  filter(!is.na(GAME_DATE)) |>
  transmute(
    gameId,
    teamId,
    teamName = paste(teamCity, teamName),
    homeTeam = HOME_TEAM,
    awayTeam = AWAY_TEAM,
    oppositionTeam = if_else(teamName == HOME_TEAM, AWAY_TEAM, HOME_TEAM),
    date = GAME_DATE,
    minutes,
    possessions,
    pacePer40,
    offensiveRating,
    defensiveRating,
    netRating,
    assistPercentage,
    defensiveReboundPercentage,
    offensiveReboundPercentage,
    reboundPercentage,
    trueShootingPercentage,
    effectiveFieldGoalPercentage,
    season = SEASON_YEAR
  ) |>
  mutate(teamName = ifelse(teamName == "LA Clippers", "Los Angeles Clippers", teamName)) |>
  mutate(homeTeam = ifelse(homeTeam == "LA Clippers", "Los Angeles Clippers", homeTeam)) |>
  mutate(awayTeam = ifelse(awayTeam == "LA Clippers", "Los Angeles Clippers", awayTeam)) |>
  mutate(
    oppositionTeam = ifelse(
      oppositionTeam == "LA Clippers",
      "Los Angeles Clippers",
      oppositionTeam
    )
  )

# Create Home / Away variable
all_player_stats <-
  all_player_stats |>
  mutate(team_full = paste(teamCity, teamName)) |>
  mutate(home_away = if_else(team_full == HOME_TEAM, "Home", "Away"))

# Get results data to join to odds----------------------------------------------
player_results <-
  all_player_stats |>
  mutate(HOME_TEAM = ifelse(HOME_TEAM == "LA Clippers", "Los Angeles Clippers", HOME_TEAM)) |>
  mutate(AWAY_TEAM = ifelse(AWAY_TEAM == "LA Clippers", "Los Angeles Clippers", AWAY_TEAM)) |>
  mutate(team_full = ifelse(team_full == "LA Clippers", "Los Angeles Clippers", team_full)) |>
  transmute(
    match = paste(HOME_TEAM, AWAY_TEAM, sep = " v "),
    player_name = PLAYER_NAME,
    team = team_full,
    date = GAME_DATE + days(1),
    points = PTS,
    rebounds = REB,
    assists = AST,
    steals = STL,
    blocks = BLK,
    minutes = MIN,
    PRA,
    FG3M
  )

# Get offensive rating and pace vs opposition
opp_stats <- read_rds("../Data/stats_vs_opp_med.rds")

# Centre rolling averages
opp_stats <-
opp_stats |> 
  ungroup() |> 
  mutate_at(vars(contains("rolling")), ~ .x - mean(.x, na.rm = TRUE)) |> 
  select(date, oppositionTeam, contains("rolling"))

# Get only betright odds-------------------------------------------------------
all_scraped_odds <-
  all_scraped_odds |>
  filter(agency == "BetRight")

##%######################################################%##
#                                                          #
####             Get Player Points Markets              ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_points_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Points")

# Propogate Start Date forward if missing
player_points_markets <-
  player_points_markets |>
  group_by(match) |>
  fill(date, .direction = "downup") |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_points_markets_overs_best <-
  player_points_markets

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_points_overs <-
  player_points_markets_overs_best |>

  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(points >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------

#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_points_markets_unders_best <-
  player_points_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_points_unders <-
  player_points_markets_unders_best |>
  
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(points <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))

# Test Diff vs average market odds strategy-------------------------------------

##%######################################################%##
#                                                          #
####           Get Player Rebounds Markets              ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_rebounds_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Rebounds")

# Propogate Start Date forward if missing
player_rebounds_markets <-
  player_rebounds_markets |>
  group_by(match) |>
  fill(date, .direction = "downup") |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_rebounds_markets_overs_best <-
  player_rebounds_markets 

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_rebounds_overs <-
  player_rebounds_markets_overs_best |>
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(rebounds >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_rebounds_markets_unders_best <-
  player_rebounds_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_rebounds_unders <-
  player_rebounds_markets_unders_best |>
  
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(rebounds <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))

##%######################################################%##
#                                                          #
####            Get Player Assists Markets              ####
#                                                          #
##%######################################################%##

#===============================================================================
# Overs
#===============================================================================

player_assists_markets <-
  all_scraped_odds |>
  filter(market_name == "Player Assists")

# Propogate Start Date forward if missing
player_assists_markets <-
  player_assists_markets |>
  group_by(match) |>
  fill(date, .direction = "downup") |>
  ungroup() |>
  left_join(player_results, by = c("match", "player_name", "date"))

# Get only the best market odds available---------------------------------------
player_assists_markets_overs_best <-
  player_assists_markets

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_assists_overs <-
  player_assists_markets_overs_best |>

  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_over_2023_24)) |>
  mutate(
    stake = case_when(
      over_price <= 1.5 ~ 150,
      over_price <= 2.4 ~ 100,
      over_price <= 5 ~ 50,
      over_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(assists >= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (over_price - 1),-stake))

#===============================================================================
# Unders
#===============================================================================

# Get only the best market odds available---------------------------------------
player_assists_markets_unders_best <-
  player_assists_markets |>
  filter(!is.na(under_price))

# Test Positive diff last 10 and season strategy--------------------------------
strategy_1_assists_unders <-
  player_assists_markets_unders_best |>
  filter(!is.na(minutes)) |>
  arrange(player_name, desc(diff_under_2023_24)) |>
  mutate(
    stake = case_when(
      under_price <= 1.5 ~ 150,
      under_price <= 2.4 ~ 100,
      under_price <= 5 ~ 50,
      under_price > 5 ~ 25
    )
  ) |>
  mutate(bet_won = ifelse(assists <= line, TRUE, FALSE)) |>
  mutate(profit = ifelse(bet_won, stake * (under_price - 1),-stake))
```

```{r}
# Function to get SGM empirical (uncorrelated) price
# Select only the columns we need-----------------------------------------------
last_15_stats <-
  all_player_stats_2023_2024 |> 
  mutate(team = paste(teamCity, teamName)) |> 
  mutate(opposition_team = ifelse(team == HOME_TEAM, AWAY_TEAM, HOME_TEAM)) |> 
  transmute(Player = paste(firstName, familyName),
            date = GAME_DATE,
            game_id = gameId,
            Team = teamTricode,
            Opponent = opposition_team,
            minutes,
            Points = points,
            Assists = assists,
            Rebounds = reboundsTotal,
            Steals = steals,
            Blocks = blocks,
            Threes = threePointersMade,
            PRAs = points + reboundsTotal + assists) |>
  filter(!is.na(minutes)) |> 
  arrange(Player, desc(date))

get_sgm_emp_prob <- function(Selections, Markets, as_at_date = lubridate::today()) {
  # Get last 15 games dataset as of date
  last_15_stats <-
    last_15_stats |>
    filter(date < as_at_date) |> 
    group_by(Player) |> 
    slice_head(n = 15) |>
    ungroup()
  
  # Parse selection string
  selection_1 <- str_split(Selections, ", ")[[1]][1]
  selection_2 <- str_split(Selections, ", ")[[1]][2]
  market_1 <- str_split(Markets, ", ")[[1]][1]
  market_2 <- str_split(Markets, ", ")[[1]][2]
  player_name <- str_extract_all(Selections, "^.*?(?=:)")
  line_1 <- str_extract(selection_1, "\\d+\\.\\d+") |> as.numeric()
  line_2 <- str_extract(selection_2, "\\d+\\.\\d+") |> as.numeric()
  
  # Get empirical probability of going under line for each selection individually
  emp_prob_1 <-
    last_15_stats |>
    filter(Player == player_name) |>
    summarise(emp_prob = sum(get(str_remove(market_1, "Player ")) < line_1) / n())
  
  emp_prob_2 <-
    last_15_stats |>
    filter(Player == player_name) |>
    summarise(emp_prob = sum(get(str_remove(market_2, "Player ")) < line_2) / n())
  
  # Get empirical probability of going under line for both selections combined
  emp_prob_both <-
    last_15_stats |>
    filter(Player == player_name) |>
    summarise(emp_prob = sum(get(str_remove(market_1, "Player ")) < line_1 & get(str_remove(market_2, "Player ")) < line_2) / n())
  
  # Return in a tibble
  tibble(
    Emp_Prob_1 = emp_prob_1[[1]],
    Emp_Prob_2 = emp_prob_2[[1]],
    Emp_Prob_Both = emp_prob_both[[1]]
  )
}
  
```

## Highest Line Same Player SGM Unders Strategy

```{r}
# Assists
assists_highest_lines <-
  strategy_1_assists_unders |> 
  arrange(player_name, match, start_time, desc(line)) |> 
  group_by(player_name, match, start_time) |>
  slice_head(n = 1) |>
  ungroup() |> 
    select(player_name,
         player_team,
         opposition_team,
         home_away,
         match,
         start_time,
         assist_line = line,
         assist_under_price = under_price,
         assist_bet_won = bet_won)

# Points
points_highest_lines <-
  strategy_1_points_unders |>
  arrange(player_name, match, start_time, desc(line)) |>
  group_by(player_name, match, start_time) |>
  slice_head(n = 1) |>
  ungroup() |>
  select(player_name,
         player_team,
         opposition_team,
         home_away,
         match,
         start_time,
         point_line = line,
         point_under_price = under_price,
         point_bet_won = bet_won)

# Rebounds
rebounds_highest_lines <-
  strategy_1_rebounds_unders |> 
  arrange(player_name, match, start_time, desc(line)) |> 
  group_by(player_name, match, start_time) |>
  slice_head(n = 1) |>
  ungroup() |> 
  select(player_name,
         player_team,
         opposition_team,
         home_away,
         match,
         start_time,
         rebound_line = line,
         rebound_under_price = under_price,
         rebound_bet_won = bet_won)

#===============================================================================
# Get pairwise multi combinations
#===============================================================================

# Points + Rebounds
unders_same_player_multi_method_1 <-
  rebounds_highest_lines |>
  inner_join(points_highest_lines,
            by = c("start_time", "match", "player_name", "player_team", "opposition_team", "home_away")) |>
  mutate(uncorrelated_price = (rebound_under_price * point_under_price)) |> 
  mutate(bet_won = if_else(point_bet_won & rebound_bet_won, TRUE, FALSE)) |> 
  mutate(profit = if_else(bet_won, ((uncorrelated_price * 100) - 100), -100)) |> 
  mutate(Selections = glue("{player_name}: {point_line}, {player_name} {rebound_line}"),
         Markets = "Player Points, Player Rebounds",
           as_at_date = as_date(start_time) - days(1))

# Points + Assists
unders_same_player_multi_method_2 <-
  points_highest_lines |> 
  inner_join(assists_highest_lines,
            by = c("start_time", "match", "player_name", "player_team", "opposition_team", "home_away")) |>
  mutate(uncorrelated_price = (assist_under_price * point_under_price)) |>
  mutate(bet_won = if_else(point_bet_won & assist_bet_won, TRUE, FALSE)) |>
  mutate(profit = if_else(bet_won, ((uncorrelated_price * 100) - 100), -100))

# Rebounds + Assists
unders_same_player_multi_method_3 <-
  rebounds_highest_lines |> 
  inner_join(assists_highest_lines,
            by = c("start_time", "match", "player_name", "player_team", "opposition_team", "home_away")) |>
  mutate(uncorrelated_price = (assist_under_price * rebound_under_price)) |>
  mutate(bet_won = if_else(assist_bet_won & rebound_bet_won, TRUE, FALSE)) |>
  mutate(profit = if_else(bet_won, ((uncorrelated_price * 100) - 100), -100))
  
#===============================================================================
# Add last 15 difference empirical probabilities
#===============================================================================

emp_probs_15 <-
  pmap(unders_same_player_multi_method_1[,c("Selections", "Markets", "as_at_date")], get_sgm_emp_prob, .progress = TRUE)

emp_probs_15 <-
  emp_probs_15 |> 
  bind_rows()

unders_same_player_multi_method_1 <-
  unders_same_player_multi_method_1 |>
  bind_cols(emp_probs_15)

unders_same_player_multi_method_1 <-
  unders_same_player_multi_method_1 |>
  mutate(edge = round(Emp_Prob_Both - 1/uncorrelated_price, 2))

#===============================================================================
# Assess performance
#===============================================================================

unders_same_player_multi_method_1 |> 
  left_join(opp_stats |> mutate(date = date - days(1)), by = c("opposition_team" = "oppositionTeam", "as_at_date" = "date")) |> 
  group_by(rolling_15_game_points < 0 & rolling_15_game_rebounds < 0) |> 
  summarise(bets = n(),
            profit = sum(profit),
            staked = bets * 100,
            roi = (profit / staked) * 100)
```
